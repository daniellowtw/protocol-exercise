// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package foopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FooClient is the client API for Foo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FooClient interface {
	Stateless(ctx context.Context, in *StatelessRequest, opts ...grpc.CallOption) (Foo_StatelessClient, error)
	Stateful(ctx context.Context, in *StatefulRequest, opts ...grpc.CallOption) (Foo_StatefulClient, error)
}

type fooClient struct {
	cc grpc.ClientConnInterface
}

func NewFooClient(cc grpc.ClientConnInterface) FooClient {
	return &fooClient{cc}
}

func (c *fooClient) Stateless(ctx context.Context, in *StatelessRequest, opts ...grpc.CallOption) (Foo_StatelessClient, error) {
	stream, err := c.cc.NewStream(ctx, &Foo_ServiceDesc.Streams[0], "/service.Foo/Stateless", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooStatelessClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Foo_StatelessClient interface {
	Recv() (*StatelessResponse, error)
	grpc.ClientStream
}

type fooStatelessClient struct {
	grpc.ClientStream
}

func (x *fooStatelessClient) Recv() (*StatelessResponse, error) {
	m := new(StatelessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fooClient) Stateful(ctx context.Context, in *StatefulRequest, opts ...grpc.CallOption) (Foo_StatefulClient, error) {
	stream, err := c.cc.NewStream(ctx, &Foo_ServiceDesc.Streams[1], "/service.Foo/Stateful", opts...)
	if err != nil {
		return nil, err
	}
	x := &fooStatefulClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Foo_StatefulClient interface {
	Recv() (*StatefulResponse, error)
	grpc.ClientStream
}

type fooStatefulClient struct {
	grpc.ClientStream
}

func (x *fooStatefulClient) Recv() (*StatefulResponse, error) {
	m := new(StatefulResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FooServer is the server API for Foo service.
// All implementations must embed UnimplementedFooServer
// for forward compatibility
type FooServer interface {
	Stateless(*StatelessRequest, Foo_StatelessServer) error
	Stateful(*StatefulRequest, Foo_StatefulServer) error
	mustEmbedUnimplementedFooServer()
}

// UnimplementedFooServer must be embedded to have forward compatible implementations.
type UnimplementedFooServer struct {
}

func (UnimplementedFooServer) Stateless(*StatelessRequest, Foo_StatelessServer) error {
	return status.Errorf(codes.Unimplemented, "method Stateless not implemented")
}
func (UnimplementedFooServer) Stateful(*StatefulRequest, Foo_StatefulServer) error {
	return status.Errorf(codes.Unimplemented, "method Stateful not implemented")
}
func (UnimplementedFooServer) mustEmbedUnimplementedFooServer() {}

// UnsafeFooServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FooServer will
// result in compilation errors.
type UnsafeFooServer interface {
	mustEmbedUnimplementedFooServer()
}

func RegisterFooServer(s grpc.ServiceRegistrar, srv FooServer) {
	s.RegisterService(&Foo_ServiceDesc, srv)
}

func _Foo_Stateless_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatelessRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FooServer).Stateless(m, &fooStatelessServer{stream})
}

type Foo_StatelessServer interface {
	Send(*StatelessResponse) error
	grpc.ServerStream
}

type fooStatelessServer struct {
	grpc.ServerStream
}

func (x *fooStatelessServer) Send(m *StatelessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Foo_Stateful_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatefulRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FooServer).Stateful(m, &fooStatefulServer{stream})
}

type Foo_StatefulServer interface {
	Send(*StatefulResponse) error
	grpc.ServerStream
}

type fooStatefulServer struct {
	grpc.ServerStream
}

func (x *fooStatefulServer) Send(m *StatefulResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Foo_ServiceDesc is the grpc.ServiceDesc for Foo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Foo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Foo",
	HandlerType: (*FooServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stateless",
			Handler:       _Foo_Stateless_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stateful",
			Handler:       _Foo_Stateful_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
